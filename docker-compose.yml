# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Usage
# -----
#
# The docker compose file is parametrized using environment variables, the
# defaults are set in .env file.
#
# Example:
# $ ARCH=arm64v8 docker compose build java
# $ ARCH=arm64v8 docker compose run java

volumes:
  maven-cache:
    name: maven-cache

services:
  ubuntu:
    # Usage:
    #   docker compose build ubuntu
    #   docker compose run ubuntu
    # Parameters:
    #   MAVEN: 3.9.9
    #   JDK: 11, 17, 21
    image: ${ARCH}/maven:${MAVEN}-eclipse-temurin-${JDK}
    volumes:
      - .:/arrow-java:delegated
      - ${DOCKER_VOLUME_PREFIX}maven-cache:/root/.m2:delegated
    command:
      /bin/bash -c "
        /arrow-java/ci/scripts/java_build.sh /arrow-java /build &&
        /arrow-java/ci/scripts/java_test.sh /arrow-java /build"

  conda-jni-cdata:
    # Usage:
    #   docker compose build conda-jni-cdata
    #   docker compose run conda-jni-cdata
    # Parameters:
    #   MAVEN: 3.9.9
    #   JDK: 11, 17, 21
    image: ${REPO}:${ARCH}-conda-java-${JDK}-maven-${MAVEN}-jni-integration
    build:
      context: .
      dockerfile: ci/docker/conda-jni.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-conda-java-${JDK}-maven-${MAVEN}-jni-integration
      args:
        jdk: ${JDK}
        maven: ${MAVEN}
    # required to use micromamba with rootless docker
    # https://github.com/mamba-org/micromamba-docker/issues/407#issuecomment-2088523507
    user: root
    volumes:
      - .:/arrow-java:delegated
      - ${DOCKER_VOLUME_PREFIX}maven-cache:/root/.m2:delegated
    environment:
      ARROW_JAVA_CDATA: "ON"
    command:
      /bin/bash -c "
        /arrow-java/ci/scripts/java_jni_build.sh /arrow-java /build/jni /build /jni &&
        /arrow-java/ci/scripts/java_build.sh /arrow-java /build /jni &&
        /arrow-java/ci/scripts/java_test.sh /arrow-java /build /jni"
